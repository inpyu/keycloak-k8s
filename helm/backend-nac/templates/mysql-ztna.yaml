{{ if eq .Values.genians_nac6_enable "yes" }}
{{ if eq .Values.genians_database_ha "yes" }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-ztna-health
  labels:
    app: mysql-ztna-health
spec:
  accessModes:
  - ReadWriteMany
  storageClassName: shared
  resources:
    requests:
      storage: 10Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-ztna-monitor
  labels:
    app: mysql-ztna-monitor
spec:
  selector:
    matchLabels:
      app: mysql-ztna-monitor
      tier: frontend
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql-ztna-monitor
        tier: frontend
    spec:
      serviceAccountName: ctlsrv
      automountServiceAccountToken: true
      enableServiceLinks: false
      containers:
      - image: docker.io/genians/genian-ctlsrv:latest
        name: mysql-ztna-monitor
        command:
        - bash
        - "-c"
        - |
          /mysql-ztna-monitor.sh
        env:
        - name: MYSQL_PWD
          valueFrom:
            secretKeyRef:
              name: mysql-nac6-pass
              key: password
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
          seLinuxOptions:
            level: "s0:c0"
        imagePullPolicy: Always
        volumeMounts:
        - name: mysql-ztna-health
          mountPath: /mysql-ztna-health
        - name: conf
          mountPath: /etc/ssh
        - name: mysql-ztna-monitor
          mountPath: /mysql-ztna-monitor.sh
          subPath: mysql-ztna-monitor.sh
        resources:
          requests:
            memory: "100Mi"
      imagePullSecrets:
      - name: regcred
      volumes:
      - name: conf
        emptyDir: {}
      - name: mysql-ztna-health
        persistentVolumeClaim:
          claimName: mysql-ztna-health
      - name: mysql-ztna-monitor
        configMap:
          name: mysql-ztna-config
          defaultMode: 0755
          items:
            - key: mysql-ztna-monitor.sh
              path: mysql-ztna-monitor.sh
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-ztna
spec:
  selector:
    matchLabels:
      app: mysql-ztna
      app.kubernetes.io/name: mysql
  serviceName: mysql-ztna
  podManagementPolicy: "Parallel"
  replicas: 2
  template:
    metadata:
      labels:
        app: mysql-ztna
        app.kubernetes.io/name: mysql
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role-backend
                operator: In
                values:
                - "true"
      securityContext:
        fsGroup: 999
      initContainers:
      - name: init-mysql-ztna
        image: mysql:8.0.34
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
          seLinuxOptions:
            level: "s0:c0"
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Get current master node index
          if [ -f /mysql-ztna-health/current_master ] ; then
            master_idx=`cat /mysql-ztna-health/current_master`
          else
            master_idx=0
          fi
          # Generate mysql server-id from pod ordinal index.
          [[ `cat /etc/hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq $master_idx ]]; then
            cp /mnt/config-map/primary.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/replica.cnf /mnt/conf.d/
          fi
          chown 999:999 /var/log/mysql
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
        - name: mysql-ztna-health
          mountPath: /mysql-ztna-health
        - name: mysql-log-storage
          mountPath: /var/log/mysql
      - name: clone-mysql-ztna
        image: genians/xtrabackup:XTRABACKUP-ALL-C-4652-8.0.x.0831
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-nac6-pass
              key: password
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Get current master node index
          if [ -f /mysql-ztna-health/current_master ] ; then
            master_idx=`cat /mysql-ztna-health/current_master`
          else
            master_idx=0
          fi
          # Skip the clone on primary (ordinal index 0).
          [[ `cat /etc/hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq $master_idx ]] && exit 0
          # If not master then check master node alive.
          if [ $ordinal -ne $master_idx ]; then
            [ -f /mysql-ztna-health/master_healthcheck_failed ] && exit 1
          fi
          # Skip the clone if data already exists.
          [[ -d /var/lib/mysql/mysql ]] && rm -rf /var/lib/mysql/*
          #[[ -d /var/lib/mysql/mysql ]] && exit 0
          # Clone data from previous peer.
          ncat --recv-only dbserver-nac6 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: mysql-ztna-health
          mountPath: /mysql-ztna-health
      containers:
      - name: mysql
        image: mysql:8.0.34
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
          seLinuxOptions:
            level: "s0:c0"
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-nac6-pass
              key: password
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: mysql-ztna-health
          mountPath: /mysql-ztna-health
        - name: healthcheck
          mountPath: /healthcheck/healthcheck.sh
          subPath: healthcheck.sh
        - name: mysql-log-storage
          mountPath: /var/log/mysql
        resources:
          requests:
            memory: "4Gi"
        livenessProbe:
          exec:
            command:
            - bash
            - "-c"
            - |
              /healthcheck/healthcheck.sh
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 5
      - name: init-slave-info
        image: mysql:8.0.34
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-nac6-pass
              key: password
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql

          # Get current master node index
          if [ -f /mysql-ztna-health/current_master ] ; then
            master_idx=`cat /mysql-ztna-health/current_master`
          else
            master_idx=0
          fi

          [[ `cat /etc/hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}

          # Determine binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" && $ordinal -eq $master_idx ]]; then
            # XtraBackup already generated a partial "CHANGE MASTER TO" query
            # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)
            cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (it's useless).
            rm -f xtrabackup_slave_info xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from primary. Parse binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm -f xtrabackup_binlog_info xtrabackup_slave_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi

          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Waiting for mysqld to be ready (accepting connections)"
            until MYSQL_PWD=${MYSQL_ROOT_PASSWORD} mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

            echo "Initializing replication from clone position"
            MYSQL_PWD=${MYSQL_ROOT_PASSWORD} mysql -h 127.0.0.1 \
                  -e "
                        RESET SLAVE; \
                        $(<change_master_to.sql.in), \
                          MASTER_HOST='dbserver-nac6', \
                          MASTER_USER='root', \
                          MASTER_PASSWORD='${MYSQL_ROOT_PASSWORD}', \
                          MASTER_CONNECT_RETRY=10; \
                        START SLAVE;" || exit 1
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
          fi
          while true; do sleep 60;done
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: mysql-ztna-health
          mountPath: /mysql-ztna-health
        resources:
          requests:
            memory: 100Mi
      - name: xtrabackup
        image: genians/xtrabackup:XTRABACKUP-ALL-C-4652-8.0.x.0831
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-nac6-pass
              key: password
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql

          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --safe-slave-backup --stream=xbstream --host=127.0.0.1 --user=root --password=${MYSQL_ROOT_PASSWORD}"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: mysql-ztna-health
          mountPath: /mysql-ztna-health
        resources:
          requests:
            memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          defaultMode: 0640
          name: mysql-ztna-config
      - name: healthcheck
        configMap:
          name: mysql-ztna-config
          defaultMode: 0755
          items:
            - key: healthcheck.sh
              path: healthcheck.sh
      - name: mysql-ztna-health
        persistentVolumeClaim:
          claimName: mysql-ztna-health
      - name: mysql-log-storage
        hostPath:
          path: /data/logs/mysql-ztna
          type: DirectoryOrCreate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: block
      resources:
        requests:
          storage: 128Gi
{{ end }}
{{ end }}
